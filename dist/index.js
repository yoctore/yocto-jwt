/* yocto-jwt - Manage jwt token, and encrypt/decrypt all request based on jwt webtoken and cert - V1.7.1 */
"use strict";function Jswt(a){this.logger=a,this.encryptKey="",this.secureKeys={publicKey:"",clientKey:"",certificate:"",serviceKey:"",csr:""},this.algorithms=["HS256","HS384","HS512","RS256","RS384","RS512","ES256","ES384","ES512"],this.usedAlgorithm="HS256",this.headers={access:"x-jwt-access-token",encode:"x-jwt-decode-token",ignore:"x-jwt-ignore-decrypt",ignoreCheck:"x-jwt-ignore-check"},this.ips=["1","::1","127.0.0.1"],this.allowedRoutes=[]}var logger=require("yocto-logger"),uuid=require("uuid"),fs=require("fs"),path=require("path"),jwt=require("jsonwebtoken"),_=require("lodash"),Q=require("q"),utils=require("yocto-utils"),crypto=require("crypto"),pem=require("./modules/pem"),Netmask=require("netmask").Netmask;Jswt.prototype.load=function(){var a=Q.defer();return pem.processJwt().then(function(b){_.merge(this.secureKeys,b),a.resolve()}.bind(this))["catch"](function(b){a.reject(b)}),a.promise},Jswt.prototype.getKey=function(){return this.encryptKey},Jswt.prototype.getPrivateKey=function(){return this.secureKeys.clientKey},Jswt.prototype.getPublicKey=function(){return this.secureKeys.publicKey},Jswt.prototype.getAccessKey=function(){if(!this.isReady())return this.logger.error(["[ Jswt.getAccessKey ] -","Cannot get access key. Encrypt key is not set"].join(" ")),!1;if(!pem.isReady())return this.logger.error(["[ Jswt.getAccessKey ] -","Cannot get access key. Certificate was not genrated."].join(" ")),!1;var a=crypto.createHash("sha1").update(this.getPublicKey()).digest("hex");return utils.crypto.encrypt(a,this.getPublicKey())},Jswt.prototype.generateAccessToken=function(a){if(!this.isReady())return this.logger.error(["[ Jswt.generateAccessToken ] -","Cannot generate access token. Encrypt key is not set"].join(" ")),!1;if(!pem.isReady())return this.logger.error(["[ Jswt.generateAccessToken ] -","Cannot generate access token. Certificate was not genrated."].join(" ")),!1;var b=this.getAccessKey();a=_.isString(a)&&!_.isEmpty(a)?a:uuid.v4();var c=a===b?"1h":"5m";return this.sign({name:a,date:Date.now(),key:b},{expiresIn:c})},Jswt.prototype.allowedIps=function(a){this.ips=_.uniq(_.flatten([this.ips,_.isArray(a)?a:[a]]))},Jswt.prototype.addAllowedRoutes=function(a){this.allowedRoutes=_.uniq(_.flatten([this.allowedRoutes,_.isArray(a)?a:[a]]))},Jswt.prototype.isAllowedRoutes=function(a){var b=!1;return _.every(this.allowedRoutes,function(c){try{if(c=_.isRegExp(c)?c:new RegExp(c),c.test(a))return b=!0,this.logger.debug("[ Jswt.isAllowedRoutes ] - the url "+a+" was authorized to connect without jwt validation with patern : "+c),!1}catch(d){return!1}return!0}.bind(this)),b},Jswt.prototype.ipIsAllowed=function(a){a=_.trimLeft(a,"::ffff:");var b=/^(?:[0-9]{1,3}\.){3}[0-9]{1,3}(\/[0-9]{1,2})$/,c=!1;return _.every(this.ips,function(d){if(c="*"===d,!c&&b.test(d))try{var e=new Netmask(d);c=e.contains(a)}catch(f){this.logger.error(["[ Jswt.ipIsAllowed ] - ",a,"Netmask error :",f].join(" "))}else c=_.contains(this.ips,a)||"*"===d;return!c}.bind(this)),c},Jswt.prototype.isAuthorized=function(){return function(a,b,c){if(!_.isObject(a)||!_.isObject(b))return c();var d=a.headers["x-forwarded-for"]||a.connection.remoteAddress;if(this.logger.debug("[ Jswt.isAuthorized ] - a new request incoming into url : "+a.url+" - from IP : "+d),!this.isAllowedRoutes(a.url)&&!this.ipIsAllowed(d))return this.logger.error("[ Jswt.isAuthorized ] - request to url : "+a.url+" is NOT allowed for IP : "+d),b.status(403).send("You are not allowed to access to this ressource.").end();if(!a.is("application/json"))return c();if(_.has(a.headers,this.headers.ignoreCheck)&&a.headers[this.headers.ignoreCheck])return this.logger.debug("[ Jswt.isAuthorized ] - ignore check header was sent. got to next"),c();this.logger.debug("[ Jswt.isAuthorized ] - checking access on server.");var e=a.get(this.headers.access.toLowerCase());return _.isUndefined(e)?b.status(403).send("You d'ont have access to this ressource.").end():void this.verify(e).then(function(a){var d=crypto.createHash("sha1").update(this.getPublicKey()).digest("hex"),e=utils.crypto.decrypt(d,a.key.toString());return e===!1?b.status(403).send("Invalid Token."):void pem.verify(this.secureKeys.certificate,this.secureKeys.clientKey).then(function(){return this.logger.debug("[ Jswt.isAuthorized ] - given token seems to be valid"),c()}.bind(this))["catch"](function(a){return this.logger.error(["[ Jswt.isAuthorized ] - ",a].join(" ")),b.status(403).send("Invalid Token.")}.bind(this))}.bind(this))["catch"](function(a){return _.has(a,"expiredAt")?b.status(403).send("Token has expired."):b.status(403).send(["Cannot validate your access.","Please retry."].join(" ")).end()}.bind(this))}.bind(this)},Jswt.prototype.autoEncryptRequest=function(){return function(a,b,c){if(_.isObject(a)&&_.isObject(b)){var d=["json","jsonp"];_.each(d,function(a){var c=b[a],d=this;b[a]=function(a){return d.logger.debug(["[ Jswt.autoEncryptRequest ] - Receiving new data to encrypt : ",utils.obj.inspect(a)].join(" ")),c.call(this,[d.sign(a)])}},this)}return c()}.bind(this)},Jswt.prototype.autoDecryptRequest=function(){return function(a,b,c){if(!a.is("application/json"))return c();if(_.has(a.headers,this.headers.ignore)&&a.headers[this.headers.ignore])return this.logger.debug("[ Jswt.autoDecryptRequest ] - ignore header was sent. got to next"),c();this.logger.debug(["[ Jswt.autoDecryptRequest ] - Receiving new data to decrypt : ",utils.obj.inspect(a.body)].join(" "));var d=a.body;return _.isEmpty(d)?c():(1===a.body.length&&_.first(a.body)&&!_.isEmpty(_.first(a.body))&&(d=_.first(a.body)),void this.verify(d).then(function(b){a.body=this.removeJwtKey(b),c()}.bind(this))["catch"](function(a){this.logger.error(["[ Jswt.autoDecryptRequest ] -",a].join(" ")),c()}.bind(this)))}.bind(this)},Jswt.prototype.algorithm=function(a){return _.isUndefined(a)||_.isNull(a)||(_.isString(a)&&_.includes(this.algorithms,a)?(this.usedAlgorithm=a,this.logger.info(["[ Jswt.algorithm ] - set algorithm to",a].join(" "))):this.logger.warning(["[ Jswt.algorithm ] - invalid algorithm given. Keep algorithm to",this.usedAlgorithm].join(" "))),this.usedAlgorithm},Jswt.prototype.setKey=function(a){var b=!1;if(_.isString(a)&&!_.isEmpty(a)){var c=a;path.isAbsolute(a)||(a=path.normalize([process.cwd(),a].join("/")));try{var d=fs.statSync(a);b=d.isFile()}catch(e){this.logger.warning("[ Jswt.setKey ] - key is not a file. Process key like a string.")}return b&&(a=fs.readFileSync(a)),this.encryptKey=b?a:c,this.logger.info("[ Jswt.setKey ] - Setting key done."),_.isString(this.encryptKey)&&!_.isEmpty(this.encryptKey)}return this.logger.warning("[ Jswt.setKey ] - Invalid key or path given."),!1},Jswt.prototype.setPrivateKey=function(a){return _.isString(a)||_.isEmpty(a)?!1:(this.privateKey=a,!0)},Jswt.prototype.verify=function(a,b){var c=Q.defer();this.isReady()||(this.logger.error("[ Jswt.verify ] - Cannot sign your data. Encrypt key is not set"),c.reject("[ Jswt.verify ] - Cannot sign your data. Encrypt key is not set"));try{jwt.verify(a,this.encryptKey,function(a,d){a?(this.logger.error(["[ Jswt.verify ] - An error occured :",a.message,a.expiredAt||""].join(" ")),c.reject(a)):(_.isBoolean(b)&&b&&(d=this.removeJwtKey(d)),c.resolve(d))}.bind(this))}catch(d){this.logger.error(["[ Jswt.verify ] - Cannot cerify your data :",d].join(" ")),c.reject("Cannot cerify your data.")}return c.promise},Jswt.prototype.isReady=function(){return _.isString(this.encryptKey)&&!_.isEmpty(this.encryptKey)},Jswt.prototype.sign=function(a,b){return this.isReady()?(b=b||{},_.has(b,"algorithm")&&(_.includes(this.algorithms,b.algorithm)?this.logger.info(["[ Jswt.sign ] - custom valid algorithm given in options.","Use",b.algorithm,"for encryption"].join(" ")):_.merge(b,{algorithm:this.algorithm()})),jwt.sign(a,this.encryptKey,b)):(this.logger.error("[ Jswt.sign ] - Cannot sign your data. Encrypt key is not set"),!1)},Jswt.prototype.removeJwtKey=function(a){if(_.isObject(a)&&!_.isEmpty(a)&&!_.isArray(a)){var b=["iss","sub","aud","exp","nbf","iat","jti"];return _.omit(a,b)}return a},Jswt.prototype.decode=function(a,b){if(!this.isReady())return this.logger.error("[ Jswt.decode ] - Cannot sign your data. Encrypt key is not set"),!1;var c=jwt.decode(a);return _.isBoolean(b)&&b&&(c=this.removeJwtKey(c)),c},module.exports=function(a){return(_.isUndefined(a)||_.isNull(a))&&(logger.warning("[ Jswt.constructor ] - Invalid logger given. Use internal logger"),a=logger),new Jswt(a)};